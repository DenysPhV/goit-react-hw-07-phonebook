{"version":3,"sources":["components/Section/Section.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactsFilter/ContactsFilter.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/contacts/contacts-actions.js","services/mockApi.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Section/Section.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactsFilter/ContactsFilter.js","App.js","index.js","components/Form/Form.module.css"],"names":["module","exports","filterContacts","createAction","getContactsFromApi","a","axios","get","data","deleteContactsFromApi","id","delete","addContactsInApi","contact","post","defaults","baseURL","addContacts","createAsyncThunk","mockApi","deleteContacts","fetchContacts","contacts","contactsReducer","createReducer","fulfilled","state","payload","filter","_","filterReducer","loading","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","Section","title","children","className","s","container","getAllPhonebookContacts","getPhonebookFilter","getVisibleContact","createSelector","normalizedFilter","toLowerCase","name","includes","number","Form","useState","setContact","dispatch","useDispatch","idInputName","shortid","generate","idInputNumber","allContacts","useSelector","reset","handleChange","e","currentTarget","value","prevState","addNoRepeatContact","cont","some","alert","onSubmit","preventDefault","st","form_contact","htmlFor","label","type","onChange","input","pattern","required","button","ContactListItem","deleteContact","map","item","onClick","ContactList","useEffect","list","ContactsFilter","valueFilter","target","App","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2c1531f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3IVE-\",\"title\":\"Section_title__3lKxe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__2dHJ-\",\"button\":\"ContactListItem_button__1aKSG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactsFilter_label__Z1Smb\",\"input\":\"ContactsFilter_input__syq5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3S8zn\",\"text\":\"ContactList_text__3IAYJ\",\"button\":\"ContactList_button__3CpKh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3_6-y\"};","//phonebook-actions\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('contact-filter');\n\n// ===============================================================\n// import shortid from 'shortid';\n// import { createAction } from '@reduxjs/toolkit';\n\n// const addContactRequest = createAction(\n//   'contacts/add',\n//   ({ id, name, phone }) => ({\n//     payload: {\n//       // id: shortid.generate(),\n//       id,\n//       name,\n//       phone,\n//     },\n//   }),\n// );\n// const addContactSuccess = createAction('contacts/addContactSuccess');\n// const addContactError = createAction('contacts/addContactError');\n\n// const deleteContactRequest = createAction('contacts/deleteContactRequest');\n// const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\n// const deleteContactError = createAction('contacts/deleteContactError');\n\n// const changeFilter = createAction('contacts/changeFilter');\n\n// export {\n//   // add\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   //delete\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n//   //filter\n//   changeFilter,\n// };\n","//phonebook-api\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://618e3e7c50e24d0017ce1176.mockapi.io';\n\n//fetchContacts\nexport async function getContactsFromApi() {\n  const { data } = await axios.get('/contacts');\n  return data;\n}\n//deleteContact\nexport async function deleteContactsFromApi(id) {\n  const { data } = await axios.delete(`/contacts/:${id}`);\n  return data;\n}\n//addContact\nexport async function addContactsInApi(contact) {\n  const { data } = await axios.post('/contacts', contact);\n  return data;\n}\n","//phonebook-operations\n//Обрабатываем запросы после сервиса\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\nimport * as mockApi from '../../services/mockApi';\n\nexport const addContacts = createAsyncThunk(\n  'contact/addContacts',\n  async (contact) => {\n    const data = await mockApi.addContactsInApi(contact);\n    return data;\n  },\n);\n\nexport const deleteContacts = createAsyncThunk(\n  'contact/deleteContacts',\n  async (id) => {\n    await mockApi.deleteContactsFromApi(id);\n    return id;\n  },\n);\n\nexport const fetchContacts = createAsyncThunk(\n  'contact/fetchContacts',\n  async () => {\n    const contacts = await mockApi.getContactsFromApi();\n    return contacts;\n  },\n);\n\n// import axios from 'axios';\n\n// Need to use the React-specific entry point to import createApi\n// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import {\n//   //add\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   //delete\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n// } from './contacts-actions';\n\n// axios.defaults.baseURL = 'https://618e3e7c50e24d0017ce1176.mockapi.io';\n\n// export const contactsApi = createAsyncThunk(\n//   'contacts/contactsApi',\n\n//   async () => {\n//     const { data } = await axios.get('/contacts');\n//     return data;\n//   },\n// );\n\n// export const addContact = (contact) => (dispatch) => {\n//   dispatch(addContactRequest());\n\n//   axios\n//     .post('/contacts', contact)\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\n//     .catch((error) => dispatch(addContactError(error)));\n// };\n\n// export const deleteContact = (id) => (dispatch) => {\n//   dispatch(deleteContactRequest());\n//   axios\n//     .delete('/contacts/:id')\n//     .then(() => dispatch(deleteContactSuccess(id)))\n//     .catch((error) => dispatch(deleteContactError(error)));\n// };\n","//phonebook-reducer\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\n\nimport { filterContacts } from './contacts-actions'; // './phonebook-actions';\nimport {\n  fetchContacts,\n  deleteContacts,\n  addContacts,\n} from './contacts-operations'; //'./phonebook-operations';\n\nconst contactsReducer = createReducer([], {\n  [addContacts.fulfilled]: (state, { payload }) => [...state, payload],\n  [deleteContacts.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addContacts.pending]: () => true,\n  [addContacts.rejected]: () => false,\n  [addContacts.fulfilled]: () => false,\n  [deleteContacts.pending]: () => true,\n  [deleteContacts.rejected]: () => false,\n  [deleteContacts.fulfilled]: () => false,\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.rejected]: () => false,\n  [fetchContacts.fulfilled]: () => false,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n  loading,\n});\n\n//==========================================================\n// import { createReducer } from '@reduxjs/toolkit';\n// import { combineReducers } from 'redux';\n\n// // import contacts from 'data/contacts.json';\n// import { contactsApi } from './contacts-operation.jsx';\n// import {\n//   //add\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   //delete\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n//   //filter\n//   changeFilter,\n// } from './contacts-actions';\n\n// const contactReducer = createReducer([], {\n//   [contactsApi.fulfilled]: (_, action) => action.payload,\n//   [addContactSuccess]: (state, action) => [action.payload, ...state],\n//   [deleteContactSuccess]: (state, action) =>\n//     state.filter(({ id }) => id !== action.payload),\n// });\n\n// const filterReducer = createReducer('', {\n//   [changeFilter]: (_, action) => action.payload,\n// });\n\n// const loadingReducer = createReducer(false, {\n//   [contactsApi.pending]: () => true,\n//   [contactsApi.fulfilled]: () => false,\n//   [contactsApi.rejected]: () => false,\n//   [addContactRequest]: () => true,\n//   [addContactSuccess]: () => false,\n//   [addContactError]: () => false,\n//   [deleteContactRequest]: () => true,\n//   [deleteContactSuccess]: () => false,\n//   [deleteContactError]: () => false,\n// });\n\n// export default combineReducers({\n//   contactReducer,\n//   filterReducer,\n//   loadingReducer,\n// });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { logger } from 'redux-logger';\n// забираю весь редюсер как файл\nimport contactReducer from './contacts/contacts-reducer';\n\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: contactReducer,\n  middleware,\n  devTools: true,\n});\n\n//=====================================================\n// import { configureStore } from '@reduxjs/toolkit';\n\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const store = configureStore({\n//   reducer: {\n//     contacts: contactsReducer,\n//   },\n//   devTools: process.env.NODE_ENV === 'development',\n// });\n\n// export default store;\n","import PropTypes from 'prop-types';\n\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.container}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","//phonebook-selectors\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllPhonebookContacts = (state) => state.contacts;\nexport const getPhonebookFilter = (state) => state.filter;\n\nexport const getVisibleContact = createSelector(\n  [getAllPhonebookContacts, getPhonebookFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(filter),\n    );\n  },\n);\n","import React, { useState } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport shortid from 'shortid';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getAllPhonebookContacts } from '../../redux/contacts/contacts-selectors'; //'../../redux/phonebook/phonebook-selectors';\nimport { addContacts } from '../../redux/contacts/contacts-operations'; //'../../redux/phonebook/phonebook-operations';\n\nimport st from './Form.module.css';\n\nconst Form = () => {\n  const initialState = {\n    name: '',\n    number: '',\n  };\n  const [contact, setContact] = useState(initialState);\n  const dispatch = useDispatch();\n  const onSubmit = (contact) => dispatch(addContacts(contact));\n\n  const idInputName = shortid.generate(); //uuidv4();\n  const idInputNumber = shortid.generate(); //uuidv4();\n  const allContacts = useSelector((state) => getAllPhonebookContacts(state));\n\n  const reset = () => {\n    setContact({ name: '', number: '' });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    setContact((prevState) => ({ ...prevState, [name]: value }));\n  };\n\n  const addNoRepeatContact = (cont, contacts) => {\n    const { name, number } = cont;\n    if (\n      contacts.some(\n        (contacts) => contacts.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some((contacts) => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    onSubmit(cont);\n    reset();\n  };\n\n  const handleSubmitForm = (e) => {\n    e.preventDefault();\n    addNoRepeatContact(contact, allContacts);\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm} className={st.form_contact}>\n      <label htmlFor={idInputName} className={st.label}>\n        Name\n        <input\n          type=\"text\"\n          id={idInputName}\n          onChange={handleChange}\n          value={contact.name}\n          className={st.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label htmlFor={idInputNumber} className={st.label}>\n        Number\n        <input\n          type=\"tel\"\n          id={idInputNumber}\n          onChange={handleChange}\n          value={contact.number}\n          className={st.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={st.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n//=============================================\n// import React, { useState } from 'react';\n\n// import shortid from 'shortid';\n// import { useDispatch, useSelector } from 'react-redux';\n\n// import PropTypes from 'prop-types';\n// import s from './Form.module.css';\n// import { addContact } from 'redux/contacts/contacts-operation';\n\n// const initialState = {\n//   name: '',\n//   number: '',\n// };\n\n// function Form() {\n//   const [state, setState] = useState(initialState);\n\n//   const contacts = useSelector((state) => state.contacts.items);\n//   const dispatch = useDispatch();\n//   const onSubmit = (name, number) => dispatch(addContact(name, number));\n\n//   const nameId = shortid.generate();\n//   const numberId = shortid.generate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setState((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const reset = () => {\n//     setState((prev) => ({ ...prev, name: '', number: '' }));\n//   };\n\n//   const addNoRepeatContact = (state, contacts) => {\n//     const { name, number } = state;\n//     if (\n//       contacts.some(\n//         (contacts) => contacts.name.toLowerCase() === name.toLowerCase(),\n//       )\n//     ) {\n//       alert(`${name} is already in contacts`);\n//       return;\n//     }\n//     if (contacts.some((contacts) => contacts.number === number)) {\n//       alert(`${number} is already in contacts`);\n//       return;\n//     }\n\n//     onSubmit(state);\n//     reset();\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     addNoRepeatContact(state, contacts);\n//   };\n\n//   const { name, number } = state;\n\n//   return (\n//     <>\n//       <form onSubmit={handleSubmit} className={s.form}>\n//         <label htmlFor={nameId} className={s.label}>\n//           <span>Name</span>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             id={nameId}\n//             className={s.input}\n//           />\n//         </label>\n//         <label htmlFor={numberId} className={s.label}>\n//           <span>Number</span>\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             id={numberId}\n//             className={s.input}\n//           />\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default Form;\n","import React from 'react';\n\nimport st from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contacts, deleteContact }) => {\n  return contacts.map(({ id, name, number }) => {\n    return (\n      <li key={id} className={st.item}>\n        <span>\n          {name}: {number}\n        </span>\n        <button\n          onClick={() => deleteContact(id)}\n          type=\"button\"\n          className={st.button}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n};\n\nexport default ContactListItem;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  deleteContacts,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations'; //'../../redux/phonebook/phonebook-operations';\nimport { getVisibleContact } from '../../redux/contacts/contacts-selectors'; //'../../redux/phonebook/phonebook-selectors';\n\nimport st from './ContactList.module.css';\n\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContact);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={st.list}>\n      <ContactListItem\n        contacts={contacts}\n        deleteContact={(id) => dispatch(deleteContacts(id))}\n      />\n    </ul>\n  );\n};\n\nexport default ContactList;\n// =======================================================\n// import React from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n\n// import PropTypes from 'prop-types';\n// import s from './ContactList.module.css';\n\n// import { deleteContactRequest } from 'redux/contacts/contacts-actions';\n\n// const getVisibleContacts = (contacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase().trim();\n\n//   return contacts.filter(\n//     (contact) =>\n//       contact.name.toLowerCase().includes(normalizedFilter) ||\n//       contact.number.includes(filter),\n//   );\n// };\n\n// const ContactList = () => {\n//   const contacts = useSelector(({ contacts: { items, filter } }) =>\n//     getVisibleContacts(items, filter),\n//   );\n//   const dispatch = useDispatch();\n\n//   return (\n//     <ul className={s.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id} className={s.item}>\n//           <span className={s.text}>{name}:</span>\n//           <span className={s.text}>{number}</span>\n\n//           <button\n//             onClick={() => {\n//               dispatch(deleteContactRequest(id));\n//             }}\n//             type=\"button\"\n//             className={s.button}\n//           >\n//             Delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// ContactList.propTypes = {\n//   // contacts: PropTypes.array,\n//   deleteContact: PropTypes.func,\n// };\n\n// export default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/contacts-actions'; //'../../redux/phonebook/phonebook-actions';\nimport { getPhonebookFilter } from '../../redux/contacts/contacts-selectors'; //'../../redux/phonebook/phonebook-selectors';\nimport st from './ContactsFilter.module.css';\n\nconst ContactsFilter = () => {\n  const valueFilter = useSelector(getPhonebookFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={st.label}>\n      Find contact by name\n      <input\n        type=\"text\"\n        className={st.input}\n        value={valueFilter}\n        onChange={(e) => dispatch(filterContacts(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default ContactsFilter;\n//========================================\n// import React from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import shortid from 'shortid';\n\n// import s from './ContactsFilter.module.css';\n\n// import { changeFilter } from 'redux/contacts/contacts-actions';\n\n// const filterId = shortid.generate();\n\n// const ContactsFilter = () => {\n//   const filter = useSelector((state) => state.filter);\n//   const dispatch = useDispatch();\n//   const onChangeFilter = (e) => dispatch(changeFilter(e.target.value));\n\n//   return (\n//     <label htmlFor={filterId} className={s.label}>\n//       <span>Filter contacts by name</span>\n//       <input\n//         type=\"text\"\n//         value={filter}\n//         onChange={onChangeFilter}\n//         id={filterId}\n//         className={s.input}\n//       />\n//     </label>\n//   );\n// };\n\n// export default ContactsFilter;\n","import React from 'react';\n\nimport Section from './components/Section';\nimport Form from './components/Form';\nimport ContactList from './components/ContactList';\nimport ContactsFilter from './components/ContactsFilter';\n\nimport s from './App.module.css';\n\nconst App = () => {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <div className={s.container}>\n          <ContactsFilter />\n          <ContactList />\n        </div>\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nReactDom.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__sJoGA\",\"label\":\"Form_label__1Vnbp\",\"input\":\"Form_input__1_Ht4\",\"button\":\"Form_button__3Jk49\"};"],"sourceRoot":""}